import asyncio
import json
import logging
import os
import threading
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

import steam.guard
from FunPayAPI import Account, types
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('steam_rental_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "8029226459:AAHkgJN-dZXuDF20kB7n5FCdhhbW0yKnu5M"
ADMIN_CHAT_ID = 7890395437
ACCOUNTS_FILE = "accounts.json"
CONFIG_FILE = "config.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
funpay_account = None
active_rentals = {}  # chat_id: {login, end_time, api_key, order_id, bonus_given}
user_states = {}  # user_id: {state, data}
pending_contact_messages = set()  # chat_ids –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–≤—è–∑–∏

class SteamRentalBot:
    def __init__(self):
        self.updater = Updater(TELEGRAM_TOKEN, use_context=True)
        self.dp = self.updater.dispatcher
        self.setup_handlers()
        self.load_config()
        self.load_accounts()
        
        # Flask –¥–ª—è –ø–∏–Ω–≥–∞
        self.app = Flask(__name__)
        self.setup_flask()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram"""
        self.dp.add_handler(CommandHandler("start", self.start_command))
        self.dp.add_handler(CommandHandler("myid", self.myid_command))
        self.dp.add_handler(CommandHandler("set_funpay_token", self.set_funpay_token))
        self.dp.add_handler(CommandHandler("add_account", self.add_account_command))
        self.dp.add_handler(CommandHandler("list_accounts", self.list_accounts))
        self.dp.add_handler(CommandHandler("status", self.status_command))
        self.dp.add_handler(CallbackQueryHandler(self.button_callback))
        self.dp.add_handler(MessageHandler(Filters.text & ~Filters.command, self.handle_message))
        
    def setup_flask(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –¥–ª—è –ø–∏–Ω–≥–∞"""
        @self.app.route('/ping')
        def ping():
            return "OK"
            
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
                self.funpay_token = config.get('funpay_token')
        except FileNotFoundError:
            self.funpay_token = None
            
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = {'funpay_token': self.funpay_token}
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
            
    def load_accounts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            with open(ACCOUNTS_FILE, 'r', encoding='utf-8') as f:
                self.accounts = json.load(f)
        except FileNotFoundError:
            self.accounts = {}
            
    def save_accounts(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        with open(ACCOUNTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.accounts, f, ensure_ascii=False, indent=2)
            
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
        return user_id == ADMIN_CHAT_ID
        
    def start_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if not self.is_admin(update.effective_user.id):
            return
            
        update.message.reply_text("üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myid –¥–ª—è chat_id.")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
    def myid_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /myid"""
        chat_id = update.effective_chat.id
        update.message.reply_text(f"üÜî –í–∞—à chat_id: {chat_id}")
        
    def set_funpay_token(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /set_funpay_token"""
        if not self.is_admin(update.effective_user.id):
            return
            
        if not context.args:
            update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /set_funpay_token <token>")
            return
            
        self.funpay_token = context.args[0]
        self.save_config()
        update.message.reply_text("‚úÖ FunPay —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
        logger.info("FunPay —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def add_account_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /add_account"""
        if not self.is_admin(update.effective_user.id):
            return
            
        user_id = update.effective_user.id
        user_states[user_id] = {'state': 'waiting_login', 'data': {}}
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Steam:", reply_markup=reply_markup)
        
    def list_accounts(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /list_accounts"""
        if not self.is_admin(update.effective_user.id):
            return
            
        if not self.accounts:
            update.message.reply_text("üìã –ü—É—Å—Ç–æ.")
            return
            
        message = "üìã –ê–∫–∫–∞—É–Ω—Ç—ã:\n"
        for login, data in self.accounts.items():
            games = ", ".join(data.get('games', []))
            status = "üü¢ –°–≤–æ–±–æ–¥–µ–Ω" if data.get('status') == 'free' else "üî¥ –ó–∞–Ω—è—Ç"
            message += f"{login}: {games} ({status})\n"
            
        update.message.reply_text(message)
        
    def status_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        if not self.is_admin(update.effective_user.id):
            return
            
        if not active_rentals:
            update.message.reply_text("üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥.")
            return
            
        message = "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã:\n"
        for chat_id, rental in active_rentals.items():
            remaining = max(0, int((rental['end_time'] - time.time()) / 60))
            message += f"–ß–∞—Ç {chat_id}: {rental['login']}, –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –º–∏–Ω\n"
            
        update.message.reply_text(message)
        
    def button_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        query.answer()
        
        if query.data == "cancel_add":
            user_id = query.from_user.id
            if user_id in user_states:
                del user_states[user_id]
            query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            
    def handle_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.is_admin(update.effective_user.id):
            return
            
        user_id = update.effective_user.id
        text = update.message.text
        
        if user_id not in user_states:
            return
            
        state = user_states[user_id]['state']
        data = user_states[user_id]['data']
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if state == 'waiting_login':
            if text in self.accounts:
                update.message.reply_text(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {text} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return
            data['login'] = text
            user_states[user_id]['state'] = 'waiting_password'
            update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å Steam:", reply_markup=reply_markup)
            
        elif state == 'waiting_password':
            data['password'] = text
            user_states[user_id]['state'] = 'waiting_mafile'
            update.message.reply_text("üìÇ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ maFile (–Ω–∞–ø—Ä–∏–º–µ—Ä, mafiles/login.json):", reply_markup=reply_markup)
            
        elif state == 'waiting_mafile':
            data['mafile_path'] = text
            user_states[user_id]['state'] = 'waiting_games'
            update.message.reply_text("üéÆ –í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, CS2,Dota2):", reply_markup=reply_markup)
            
        elif state == 'waiting_games':
            games = [game.strip() for game in text.split(',')]
            data['games'] = games
            user_states[user_id]['state'] = 'waiting_api_key'
            update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ Steam API –∫–ª—é—á:", reply_markup=reply_markup)
            
        elif state == 'waiting_api_key':
            data['api_key'] = text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
            login = data['login']
            self.accounts[login] = {
                'password': data['password'],
                'mafile_path': data['mafile_path'],
                'games': data['games'],
                'api_key': data['api_key'],
                'status': 'free'
            }
            self.save_accounts()
            
            games_str = ", ".join(data['games'])
            update.message.reply_text(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {login} –¥–æ–±–∞–≤–ª–µ–Ω —Å –∏–≥—Ä–∞–º–∏: {games_str}")
            
            del user_states[user_id]
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: {login}")
            
    def get_free_account(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        for login, data in self.accounts.items():
            if data.get('status') == 'free':
                return login
        return None
        
    def generate_steam_guard_code(self, mafile_path: str) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Steam Guard –∫–æ–¥–∞"""
        try:
            with open(mafile_path, 'r') as f:
                mafile_data = json.load(f)
            shared_secret = mafile_data['shared_secret']
            return steam.guard.generate_code(shared_secret)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
            return None
            
    def change_password(self, login: str) -> bool:
        """–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ steampy
        logger.info(f"–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è {login} (–∑–∞–≥–ª—É—à–∫–∞)")
        return True
        
    def send_telegram_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        try:
            self.updater.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
    def handle_new_order(self, order):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        try:
            chat_id = order.chat_id
            buyer_username = order.buyer.username
            description = order.description
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            free_login = self.get_free_account()
            if not free_login:
                order.send_message("üö´ –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
                self.send_telegram_notification(f"‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}")
                return
                
            account_data = self.accounts[free_login]
            account_data['status'] = 'rented'
            self.save_accounts()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            message = f"""üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –í–æ—Ç —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç:
üîë –õ–æ–≥–∏–Ω: {free_login}
üîí –ü–∞—Ä–æ–ª—å: {account_data['password']}

üì≤ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å Steam Guard –∫–æ–¥, –Ω–∞–ø–∏—à–∏ !–∫–æ–¥
üéÅ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å +30 –º–∏–Ω, –æ—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –∞—Ä–µ–Ω–¥—ã
üìû –î–ª—è —Å–≤—è–∑–∏ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º: !—Å–≤—è–∑—å
‚ÑπÔ∏è –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã: !–≤—Ä–µ–º—è, !–∏–≥—Ä—ã, !–ø–æ–º–æ—â—å"""
            
            order.send_message(message)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ä–µ–Ω–¥—É
            end_time = time.time() + 3600  # 1 —á–∞—Å
            active_rentals[chat_id] = {
                'login': free_login,
                'end_time': end_time,
                'api_key': account_data['api_key'],
                'order_id': order.id,
                'bonus_given': False
            }
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            self.send_telegram_notification(f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ {order.id} –æ—Ç {buyer_username}! –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
            logger.info(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ {order.id}, –≤—ã–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç {free_login}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")
            
    def handle_new_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ FunPay"""
        try:
            chat_id = message.chat_id
            text = message.text.strip()
            author = message.author
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if author == funpay_account.username:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∞—Ä–µ–Ω–¥—É
            if chat_id not in active_rentals:
                message.send("üö´ –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤ –∞—Ä–µ–Ω–¥–µ.")
                return
                
            rental = active_rentals[chat_id]
            login = rental['login']
            account_data = self.accounts[login]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if text.lower() in ['!–∫–æ–¥', '!steamguard']:
                code = self.generate_steam_guard_code(account_data['mafile_path'])
                if code:
                    message.send(f"üì≤ Steam Guard –∫–æ–¥: {code}")
                    self.send_telegram_notification(f"üì≤ –ó–∞–ø—Ä–æ—à–µ–Ω –∫–æ–¥ –≤ —á–∞—Ç–µ {chat_id}")
                else:
                    message.send("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞.")
                    
            elif text.lower() == '!–≤—Ä–µ–º—è':
                remaining = max(0, int(rental['end_time'] - time.time()))
                minutes = remaining // 60
                seconds = remaining % 60
                message.send(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {minutes} –º–∏–Ω {seconds} —Å–µ–∫")
                self.send_telegram_notification(f"‚è≥ –ó–∞–ø—Ä–æ—à–µ–Ω–æ –≤—Ä–µ–º—è –≤ —á–∞—Ç–µ {chat_id}")
                
            elif text.lower() == '!–∏–≥—Ä—ã':
                games = ", ".join(account_data.get('games', []))
                message.send(f"üéÆ –ò–≥—Ä—ã: {games}")
                self.send_telegram_notification(f"üéÆ –ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –≤ —á–∞—Ç–µ {chat_id}")
                
            elif text.lower() == '!–ø–æ–º–æ—â—å':
                help_text = "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã: !–∫–æ–¥ ‚Äî –∫–æ–¥, !–≤—Ä–µ–º—è ‚Äî –≤—Ä–µ–º—è, !–∏–≥—Ä—ã ‚Äî –∏–≥—Ä—ã, !—Å–≤—è–∑—å ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É"
                message.send(help_text)
                self.send_telegram_notification(f"‚ÑπÔ∏è –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–æ–º–æ—â—å –≤ —á–∞—Ç–µ {chat_id}")
                
            elif text.lower() == '!—Å–≤—è–∑—å':
                message.send("üì© –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É.")
                pending_contact_messages.add(chat_id)
                self.send_telegram_notification(f"üìû –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ {chat_id} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è")
                
            elif chat_id in pending_contact_messages:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                self.send_telegram_notification(f"üìû –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (—á–∞—Ç {chat_id}): {text}")
                message.send("üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É!")
                pending_contact_messages.discard(chat_id)
                
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: {text}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
    def rental_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–µ–Ω–¥—ã"""
        while True:
            try:
                current_time = time.time()
                expired_rentals = []
                
                for chat_id, rental in active_rentals.items():
                    remaining = rental['end_time'] - current_time
                    
                    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    if 1800 >= remaining > 1740:  # 30 –º–∏–Ω—É—Ç
                        funpay_account.send_message(chat_id, "‚ö†Ô∏è –ê—Ä–µ–Ω–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç!")
                        logger.info(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 30 –º–∏–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                    elif 1200 >= remaining > 1140:  # 20 –º–∏–Ω—É—Ç
                        funpay_account.send_message(chat_id, "‚ö†Ô∏è –ê—Ä–µ–Ω–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç!")
                        logger.info(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 20 –º–∏–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                    elif 600 >= remaining > 540:  # 10 –º–∏–Ω—É—Ç
                        funpay_account.send_message(chat_id, "‚ö†Ô∏è –ê—Ä–µ–Ω–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç!")
                        logger.info(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 10 –º–∏–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                    
                    # –ö–æ–Ω–µ—Ü –∞—Ä–µ–Ω–¥—ã
                    if remaining <= 0:
                        expired_rentals.append(chat_id)
                        
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∞—Ä–µ–Ω–¥—ã
                for chat_id in expired_rentals:
                    rental = active_rentals[chat_id]
                    login = rental['login']
                    
                    # –ú–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
                    if self.change_password(login):
                        funpay_account.send_message(chat_id, "üèÅ –ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –∫–∏–∫–Ω—É—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞.")
                        self.send_telegram_notification(f"–ê—Ä–µ–Ω–¥–∞ –¥–ª—è {login} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—ë–Ω.")
                    else:
                        self.send_telegram_notification(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –¥–ª—è {login}")
                        
                    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                    self.accounts[login]['status'] = 'free'
                    self.save_accounts()
                    
                    del active_rentals[chat_id]
                    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∞—Ä–µ–Ω–¥–∞ –¥–ª—è {login}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä–µ–Ω–¥—ã: {e}")
                
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
    def bonus_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –æ—Ç–∑—ã–≤—ã"""
        while True:
            try:
                for chat_id, rental in active_rentals.items():
                    if rental['bonus_given']:
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤ (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ FunPay API)
                    # order = funpay_account.get_order(rental['order_id'])
                    # if order.review_text:
                    #     rental['end_time'] += 1800  # +30 –º–∏–Ω—É—Ç
                    #     rental['bonus_given'] = True
                    #     funpay_account.send_message(chat_id, "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –î–æ–±–∞–≤–ª–µ–Ω–æ 30 –º–∏–Ω—É—Ç –∞—Ä–µ–Ω–¥—ã!")
                    #     self.send_telegram_notification(f"–ë–æ–Ω—É—Å –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {rental['order_id']}")
                    #     logger.info(f"–ë–æ–Ω—É—Å –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {rental['order_id']}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ–Ω—É—Å–æ–≤: {e}")
                
            time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            
    def start_funpay_listener(self):
        """–ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è FunPay"""
        global funpay_account
        
        if not self.funpay_token:
            self.send_telegram_notification("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FunPay —Ç–æ–∫–µ–Ω: /set_funpay_token")
            return
            
        try:
            funpay_account = Account(self.funpay_token, raise_on_error=True)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            funpay_account.add_event_handler(types.EventTypes.NEW_ORDER, self.handle_new_order)
            funpay_account.add_event_handler(types.EventTypes.NEW_MESSAGE, self.handle_new_message)
            
            self.send_telegram_notification("‚úÖ FunPay –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            logger.info("FunPay —Å–ª—É—à–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
            funpay_account.listen()
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FunPay: {e}"
            self.send_telegram_notification(error_msg)
            logger.error(error_msg)
            
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Steam Rental Bot")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
        self.updater.start_polling()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
        threading.Thread(target=self.rental_monitor, daemon=True).start()
        threading.Thread(target=self.bonus_monitor, daemon=True).start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º FunPay —Å–ª—É—à–∞—Ç–µ–ª—å
        threading.Thread(target=self.start_funpay_listener, daemon=True).start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –¥–ª—è –ø–∏–Ω–≥–∞
        threading.Thread(target=lambda: self.app.run(host='0.0.0.0', port=5000), daemon=True).start()
        
        logger.info("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
        
        # –î–µ—Ä–∂–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
        self.updater.idle()

if __name__ == "__main__":
    bot = SteamRentalBot()
    bot.run()
